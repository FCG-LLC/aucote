from collections import defaultdict
import csv
from os import path
from structs import RiskLevel


class Exploit:
    id = None
    app = None
    name = None
    title = None
    description = None
    risk_level = None

class Exploits:
    '''
    Collection of exploits
    '''
    def __init__(self):
        self._exploits = defaultdict(dict)

    def __iter__(self):
        return iter(self._exploits)

    def add(self, exploit):
        self._exploits[exploit.app][exploit.name] = exploit

    def find(self, app, name):
        return self._exploits[app].get(name)

    @classmethod
    def read(cls):
        result = cls()
        file_name = path.join(path.dirname(path.dirname(__file__)), 'exploits', 'exploits.csv')
        with open(file_name, newline='', encoding='utf-8') as csvfile:
            reader = csv.reader(csvfile, delimiter=';', quotechar='"')
            for num, row in enumerate(reader):
                if num == 0: continue #header
                exploit = Exploit()
                exploit.id = int(row[0])
                exploit.app = row[1]
                exploit.name = row[2]
                exploit.title = row[3]
                exploit.description = row[4]
                exploit.risk_level = RiskLevel.from_name(row[5])
                exploit.services = set(row[6].split(','))
                exploit.ports = cls.parse_ports(row[7])
                result.add(exploit)
        return result

    @classmethod
    def parse_ports(cls, text):

        if not text:
            return {}

        return_value = {}
        protocols = text.split(",")
        ports = [protocol.split(":") for protocol in protocols]
        for protocol, port_set in ports:
            return_value[protocol] = set()

            all_ports = port_set.split(".")
            for port in all_ports:
                if "-" in port:
                    port_range = port.split("-")
                    return_value[protocol].update(range(int(port_range[0]), int(port_range[1]) + 1))
                    continue
                return_value[protocol].add(int(port))

        return return_value
