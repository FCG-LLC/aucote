from unittest import TestCase
from unittest.mock import MagicMock, patch

from tools.cisco_global_exploiter.tool import CiscoGlobalExploiterTool


class CiscoGlobalExploiterToolTest(TestCase):
    def setUp(self):
        self.config = MagicMock()
        self.executor = MagicMock()
        self.exploit = MagicMock()
        self.exploit.name = 'exploit_1'
        self.exploits = [self.exploit]
        self.port = MagicMock()
        self.port.is_ipv6 = False
        self.port.is_broadcast = False
        self.port.is_physical = False
        self.tool = CiscoGlobalExploiterTool(config=self.config, executor=self.executor, exploits=self.exploits,
                                             port=self.port)

    @patch('tools.cisco_global_exploiter.tool.CiscoGlobalExploiterTask')
    def test_call(self, mock_task):
        self.tool()

        mock_task.assert_called_once_with(executor=self.executor, port=self.port, exploits=self.exploits)
        self.executor.add_task.assert_called_once_with(mock_task.return_value)

    def test_ipv6(self):
        self.port.is_ipv6 = True
        self.tool()
        self.assertFalse(self.executor.add_task.called)

    def test_disable_script(self):
        self.tool.config = {'disabled_scripts': ['exploit_1']}
        self.tool()
        self.assertFalse(self.executor.add_task.called)
