"""
Exploits test
"""

from unittest import TestCase
from unittest.mock import mock_open, MagicMock, patch

from fixtures.exploits import Exploit
from fixtures.exploits import Exploits
from structs import RiskLevel, TransportProtocol, Port


class ExploitTest(TestCase):
    """
    Exploit tests
    """
    PORTS = 'TCP:22.24-26,UDP:17'
    CSV_PARSED = [['id', 'app', 'name', 'title', 'description', 'risk_level', 'services', 'ports'], \
                 [1, 'nmap', 'ssl-poodle', 'SSL POODLE information leak', 'Poodle description', 'None', 'ssh,ftp',
                  PORTS]]

    def prepare(self):
        self.exploits = Exploits.read()
        self.exploit = self.exploits.find(self.CSV_PARSED[1][1], self.CSV_PARSED[1][2])

    @patch('builtins.open', mock_open(read_data=""))
    @patch('csv.reader', MagicMock(return_value=CSV_PARSED))
    def test_read_exploit(self):
        """
        Test parsing csv file:

        INPUT:
        csv.parser returns CSV_PARSED

        OUTPUT:
        Exploits object
        """
        self.prepare()
        self.assertEqual(self.exploit.id, self.CSV_PARSED[1][0])
        self.assertEqual(self.exploit.app, self.CSV_PARSED[1][1])
        self.assertEqual(self.exploit.name, self.CSV_PARSED[1][2])
        self.assertEqual(self.exploit.title, self.CSV_PARSED[1][3])
        self.assertEqual(self.exploit.description, self.CSV_PARSED[1][4])
        self.assertEqual(self.exploit.risk_level, RiskLevel.from_name(self.CSV_PARSED[1][5]))
        self.assertEqual(self.exploit.services, {'ssh', 'ftp'})
        self.assertDictEqual(self.exploit.ports, {'TCP': {22, 24, 25, 26}, 'UDP': {17}})

    def test_parse_ports(self):
        ports = Exploits.parse_ports(self.PORTS)
        self.assertDictEqual(ports, {'TCP': {22, 24, 25, 26}, 'UDP': {17}})

    def test_parse_empty_ports(self):
        ports = Exploits.parse_ports('')
        self.assertDictEqual(ports, {})

    def test_parse_services(self):
        services = Exploits.parse_services('ssh,ftp')
        self.assertEqual(services, {'ssh', 'ftp'})

    def test_parse_empty_services(self):
        services = Exploits.parse_services('')
        self.assertEqual(services, set())

    def test_find_exploits_by_port(self):
        exploits = Exploits()
        exploit_1 = Exploit(app='test', services={'ssh'}, ports={'TCP': {22,23}})
        exploit_2 = Exploit(app='test', services={'test', 'ssh'}, ports={'TCP': {22}, 'UDP': {25}})
        exploit_3 = Exploit(app='test2', services={'test'}, ports={'TCP': {23}, 'UDP': {25}})
        exploit_4 = Exploit(app='test3', services=set(), ports={})

        exploits.add(exploit_1)
        exploits.add(exploit_2)
        exploits.add(exploit_3)
        exploits.add(exploit_4)

        port = Port()
        port.transport_protocol = TransportProtocol.TCP
        port.number = 99
        port.service_name = 'ssh'

        found = exploits.find_all(port)
        self.assertEqual(len(found['test']), 2)
        self.assertIn(exploit_1, found['test'])
        self.assertIn(exploit_2, found['test'])
        self.assertEqual(len(found['test3']), 1)
        self.assertIn(exploit_4, found['test3'])

        port.service_name = 'test'
        found = exploits.find_all(port)
        self.assertEqual(len(found['test2']), 1)
        self.assertEqual(len(found['test']), 1)
        self.assertIn(exploit_2, found['test'])
        self.assertIn(exploit_3, found['test2'])
        self.assertEqual(len(found['test3']), 1)
        self.assertIn(exploit_4, found['test3'])

        port.service_name = '_'
        port.number = 22
        found = exploits.find_all(port)
        self.assertEqual(len(found['test']), 2)
        self.assertIn(exploit_1, found['test'])
        self.assertIn(exploit_2, found['test'])
        self.assertEqual(len(found['test3']), 1)
        self.assertIn(exploit_4, found['test3'])

        port.number = 23
        found = exploits.find_all(port)
        self.assertEqual(len(found['test2']), 1)
        self.assertEqual(len(found['test']), 1)
        self.assertIn(exploit_1, found['test'])
        self.assertIn(exploit_3, found['test2'])
        self.assertEqual(len(found['test3']), 1)
        self.assertIn(exploit_4, found['test3'])

        port.number = 25
        port.transport_protocol = TransportProtocol.UDP
        found = exploits.find_all(port)
        self.assertEqual(len(found['test2']), 1)
        self.assertEqual(len(found['test']), 1)
        self.assertIn(exploit_2, found['test'])
        self.assertIn(exploit_3, found['test2'])
        self.assertEqual(len(found['test3']), 1)
        self.assertIn(exploit_4, found['test3'])

        port.service_name = 'ssh'
        found = exploits.find_all(port)
        self.assertEqual(len(found['test2']), 1)
        self.assertEqual(len(found['test']), 2)
        self.assertIn(exploit_1, found['test'])
        self.assertIn(exploit_2, found['test'])
        self.assertIn(exploit_3, found['test2'])
        self.assertEqual(len(found['test3']), 1)
        self.assertIn(exploit_4, found['test3'])

    @patch('builtins.open', mock_open(read_data=""))
    @patch('csv.reader', MagicMock(return_value=CSV_PARSED))
    def test_iter(self):

        self.prepare()
        for exploit in self.exploits:
            self.assertEqual(exploit, self.exploit)
