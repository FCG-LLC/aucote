"""
Exploits test
"""

from unittest import TestCase
from unittest.mock import mock_open, MagicMock, patch

from fixtures.exploits import read_exploits
from structs import RiskLevel


class ExploitTest(TestCase):
    """
    Exploit tests
    """
    CSV_PARSED = [['id', 'app', 'name', 'title', 'description', 'risk_level'], \
                 [1, 'nmap', 'ssl-poodle', 'SSL POODLE information leak', 'Poodle description', 'None']]

    @patch('builtins.open', mock_open(read_data=""))
    @patch('csv.reader', MagicMock(return_value=CSV_PARSED))
    def test_read_exploit(self):
        """
        Test parsing csv file:

        INPUT:
        csv.parser returns CSV_PARSED

        OUTPUT:
        Exploits object
        """
        exploits = read_exploits()
        exploit = exploits.find(self.CSV_PARSED[1][1], self.CSV_PARSED[1][2])

        self.assertEqual(exploit.id, self.CSV_PARSED[1][0])
        self.assertEqual(exploit.app, self.CSV_PARSED[1][1])
        self.assertEqual(exploit.name, self.CSV_PARSED[1][2])
        self.assertEqual(exploit.title, self.CSV_PARSED[1][3])
        self.assertEqual(exploit.description, self.CSV_PARSED[1][4])
        self.assertEqual(exploit.risk_level, RiskLevel.from_name(self.CSV_PARSED[1][5]))
