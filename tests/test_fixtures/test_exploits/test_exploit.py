"""
Exploits test
"""
from unittest import TestCase
from unittest.mock import mock_open, MagicMock, patch

from fixtures.exploits import Exploit, Exploits
from structs import RiskLevel, TransportProtocol, Port
from utils.exceptions import ServiceUnsupportedByNmapException, PortUnsupportedException, \
    ProtocolUnsupportedByNmapException, PortRangeUnsupported


class ExploitTest(TestCase):
    """
    Exploit tests
    """
    PORTS = 'TCP:22.24-26,UDP:17'
    CSV_PARSED = [['id', 'app', 'name', 'title', 'description', 'risk_level', 'services', 'ports', 'period'],
                 [1, 'nmap', 'ssl-poodle', 'SSL POODLE information leak', 'Poodle description', 'None', 'ssh,ftp',
                  PORTS, '12s']]

    def prepare(self):
        self.exploits = Exploits.read(file_name='test')
        self.exploit = self.exploits.find(self.CSV_PARSED[1][1], self.CSV_PARSED[1][2])

    @patch('builtins.open', mock_open(read_data=""))
    @patch('csv.reader', MagicMock(return_value=CSV_PARSED))
    def test_read_exploit(self):
        """
        Test parsing csv file:

        INPUT:
        csv.parser returns CSV_PARSED

        OUTPUT:
        Exploits object
        """
        self.prepare()

        self.assertEqual(self.exploit.id, self.CSV_PARSED[1][0])
        self.assertEqual(self.exploit.app, self.CSV_PARSED[1][1])
        self.assertEqual(self.exploit.name, self.CSV_PARSED[1][2])
        self.assertEqual(self.exploit.title, self.CSV_PARSED[1][3])
        self.assertEqual(self.exploit.description, self.CSV_PARSED[1][4])
        self.assertEqual(self.exploit.risk_level, RiskLevel.from_name(self.CSV_PARSED[1][5]))
        self.assertEqual(self.exploit.services, {'ssh', 'ftp'})
        self.assertDictEqual(self.exploit.ports, {'TCP': {22, 24, 25, 26}, 'UDP': {17}})
        self.assertEqual(self.exploit.period, 12)

    def test_read_exploits_from_custom_file(self):
        with patch('builtins.open', create=True) as reader_mock:
            self.exploits = Exploits.read('test')

        reader_mock.assert_called_once_with('test', encoding='utf-8', newline='')

    def test_parse_ports(self):
        result = Exploits.parse_ports(self.PORTS)
        expected = {'TCP': {22, 24, 25, 26}, 'UDP': {17}}

        self.assertDictEqual(result, expected)

    def test_parse_empty_ports(self):
        result = Exploits.parse_ports('')
        expected = {}

        self.assertDictEqual(result, expected)

    def test_parse_ports_with_whitechars(self):
        result = Exploits.parse_ports('TCP : 45')
        expected = {'TCP': {45}}

        self.assertDictEqual(result, expected)

    def test_parse_ports_non_positive(self):
        self.assertRaises(PortUnsupportedException, Exploits.parse_ports, 'ftttp')
        self.assertRaises(ProtocolUnsupportedByNmapException, Exploits.parse_ports, 'W:-30')
        self.assertRaises(PortUnsupportedException, Exploits.parse_ports, 'TCP:asd')

    def test_parse_services(self):
        result = Exploits.parse_services('ssh,ftp')
        expected = {'ssh', 'ftp'}

        self.assertEqual(result, expected)

    def test_parse_services_with_whitechars(self):
        text = "ssh, ftp"

        result = Exploits.parse_services(text)
        expected = {'ssh', 'ftp'}

        self.assertEqual(result, expected)

    def test_parse_services_out_of_nmap(self):
        self.assertRaises(ServiceUnsupportedByNmapException, Exploits.parse_services, 'ftttp')

    def test_parse_empty_services(self):
        result = Exploits.parse_services('')
        excepted = set()

        self.assertEqual(result, excepted)

    def test_find_exploits_by_port(self):
        exploits = Exploits()
        exploit_1 = Exploit(exploit_id=1, app='test', services={'ssh'}, ports={'TCP': {22,23}})
        exploit_2 = Exploit(exploit_id=2, app='test', services={'test', 'ssh'}, ports={'TCP': {22}, 'UDP': {25}})
        exploit_3 = Exploit(exploit_id=3, app='test2', services={'test'}, ports={'TCP': {23}, 'UDP': {25}})
        exploit_4 = Exploit(exploit_id=4, app='test3', services=set(), ports={})

        exploits.add(exploit_1)
        exploits.add(exploit_2)
        exploits.add(exploit_3)
        exploits.add(exploit_4)

        port = Port(transport_protocol=TransportProtocol.TCP, number=99, node=None)
        port.protocol = 'ssh'

        found = exploits.find_all_matching(port)
        self.assertEqual(len(found['test']), 2)
        self.assertIn(exploit_1, found['test'])
        self.assertIn(exploit_2, found['test'])
        self.assertEqual(len(found['test3']), 1)
        self.assertIn(exploit_4, found['test3'])

        port.protocol = 'test'
        found = exploits.find_all_matching(port)
        self.assertEqual(len(found['test2']), 1)
        self.assertEqual(len(found['test']), 1)
        self.assertIn(exploit_2, found['test'])
        self.assertIn(exploit_3, found['test2'])
        self.assertEqual(len(found['test3']), 1)
        self.assertIn(exploit_4, found['test3'])

        port.protocol = '_'
        port.number = 22
        found = exploits.find_all_matching(port)
        self.assertEqual(len(found['test']), 2)
        self.assertIn(exploit_1, found['test'])
        self.assertIn(exploit_2, found['test'])
        self.assertEqual(len(found['test3']), 1)
        self.assertIn(exploit_4, found['test3'])

        port.number = 23
        found = exploits.find_all_matching(port)
        self.assertEqual(len(found['test2']), 1)
        self.assertEqual(len(found['test']), 1)
        self.assertIn(exploit_1, found['test'])
        self.assertIn(exploit_3, found['test2'])
        self.assertEqual(len(found['test3']), 1)
        self.assertIn(exploit_4, found['test3'])

        port.number = 25
        port.transport_protocol = TransportProtocol.UDP
        found = exploits.find_all_matching(port)
        self.assertEqual(len(found['test2']), 1)
        self.assertEqual(len(found['test']), 1)
        self.assertIn(exploit_2, found['test'])
        self.assertIn(exploit_3, found['test2'])
        self.assertEqual(len(found['test3']), 1)
        self.assertIn(exploit_4, found['test3'])

        port.protocol = 'ssh'
        found = exploits.find_all_matching(port)
        self.assertEqual(len(found['test2']), 1)
        self.assertEqual(len(found['test']), 2)
        self.assertIn(exploit_1, found['test'])
        self.assertIn(exploit_2, found['test'])
        self.assertIn(exploit_3, found['test2'])
        self.assertEqual(len(found['test3']), 1)
        self.assertIn(exploit_4, found['test3'])

    @patch('builtins.open', mock_open(read_data=""))
    @patch('csv.reader', MagicMock(return_value=CSV_PARSED))
    def test_iter(self):

        self.prepare()
        for exploit in self.exploits:
            self.assertEqual(exploit, self.exploit)

    def test_port_with_incorrect_range(self):
        data = 'TCP: 23 - 14'

        self.assertRaises(PortRangeUnsupported, Exploits.parse_ports, data)

    def test_port_range_with_whitechars(self):
        data = 'TCP: 14 - 23'

        expected = {'TCP': set(range(14,24))}
        result = Exploits.parse_ports(data)

        self.assertDictEqual(result, expected)

    def test_equality(self):
        self.assertEqual(Exploit(exploit_id=1), Exploit(exploit_id=1))

    def test_non_equal(self):
        self.assertTrue(Exploit(exploit_id=1) != Exploit(exploit_id=2))

    def test_equality_different_types(self):
        self.assertNotEqual(Exploit(exploit_id=1), MagicMock(exploit_id=1))

    def test_hash(self):
        exploit = Exploit(exploit_id=1)

        expected = hash(1)
        result = hash(exploit)

        self.assertEqual(result, expected)

    @patch('builtins.open', mock_open(read_data=""))
    @patch('csv.reader', MagicMock(return_value=CSV_PARSED))
    def test_remove(self):
        self.prepare()
        self.exploits.remove(Exploit(exploit_id=1, app='nmap', name='ssl-poodle'))

        self.assertEqual(self.exploits._all_exploits, set())
        self.assertEqual(self.exploits.find('nmap', 'ssl-poodle'), None)

    def test_find_phy_exploits(self):
        exploits = Exploits()
        exploit_1 = Exploit(exploit_id=1, app='test', services={'ssh'}, ports={'PHY': {0}})
        exploit_2 = Exploit(exploit_id=2, app='test', services={'test', 'ssh'}, ports={'TCP': {22}, 'UDP': {25}})
        exploit_3 = Exploit(exploit_id=3, app='test2', services={'test'}, ports={'TCP': {23}, 'UDP': {25}})
        exploit_4 = Exploit(exploit_id=4, app='test3', services=set(), ports={'PHY': 0})

        exploits.add(exploit_1)
        exploits.add(exploit_2)
        exploits.add(exploit_3)
        exploits.add(exploit_4)

        port = Port(transport_protocol=TransportProtocol.PHY, number=0, node=None)

        result = exploits.find_all_phy()
        expected = {
            "test": [exploit_1],
            "test3": [exploit_4]
        }

        self.assertCountEqual(result, expected)
